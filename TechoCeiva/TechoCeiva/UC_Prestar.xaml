<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	x:Class="TechoCeiva.UC_Manage"
	x:Name="UserControl"
	d:DesignWidth="640" d:DesignHeight="480" Width="1123.501" Height="485.053">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Simple Styles.xaml"/>
			</ResourceDictionary.MergedDictionaries>
<!-- Etiqueta simple: esta plantilla es simplemente un ContentPresenter que muestra el contenido de la etiqueta -->
			<Style x:Key="SimpleLabel" TargetType="{x:Type Label}">
				<Setter Property="HorizontalContentAlignment" Value="Left"/>
				<Setter Property="VerticalContentAlignment" Value="Top"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Label}">
							<Grid>
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false"/>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
		<!-- Los pinceles deshabilitados se usan para el aspecto de los controles cuando están deshabilitados -->
			<SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
			<SolidColorBrush x:Key="SolidBorderBrush" Color="#888"/>
		<!-- Se usa para el fondo de los controles ScrollViewer, TreeView, ListBox, Expander, TextBox y Tab -->
			<SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF"/>
		<!-- NormalBrush se usa como fondo para SimpleButton y SimpleRepeatButton -->
			<LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#EEE" Offset="0.0"/>
				<GradientStop Color="#CCC" Offset="1.0"/>
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#CCC" Offset="0.0"/>
				<GradientStop Color="#444" Offset="1.0"/>
			</LinearGradientBrush>
		<!-- DefaultedBorderBrush se usa para mostrar KeyBoardFocus -->
			<LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#777" Offset="0.0"/>
				<GradientStop Color="#000" Offset="1.0"/>
			</LinearGradientBrush>
		<!-- MouseOverBrush se usa para MouseOver en Button, Radio Button y CheckBox -->
			<LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#FFF" Offset="0.0"/>
				<GradientStop Color="#AAA" Offset="1.0"/>
			</LinearGradientBrush>
		<!-- PressedBrush se usa para Pressed en Button, Radio Button y CheckBox -->
			<LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#BBB" Offset="0.0"/>
				<GradientStop Color="#EEE" Offset="0.1"/>
				<GradientStop Color="#EEE" Offset="0.9"/>
				<GradientStop Color="#FFF" Offset="1.0"/>
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#444" Offset="0.0"/>
				<GradientStop Color="#888" Offset="1.0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>
		<!-- RepeatButton simple: el control ScrollBar simple lo usa para los botones hacia arriba y hacia abajo -->
			<Style x:Key="SimpleRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RepeatButton}">
							<Grid>
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
								<ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		<!-- Estilo ScrollRepeatButton simple: este control RepeatButton se usa por encima y por debajo del control Thumb en Scrollbar. Su aspecto es transparente para que no aparezca superpuesto sobre la barra de desplazamiento -->
			<Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Focusable" Value="false"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RepeatButton}">
							<Grid>
								<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		<!-- Thumb simple: el control Thumb es la parte arrastrable de Scrollbar -->
			<Style x:Key="SimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Thumb}">
							<Grid Margin="0,0,0,0" x:Name="Grid">
								<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsFocused" Value="True"/>
								<Trigger Property="IsMouseOver" Value="True"/>
								<Trigger Property="IsEnabled" Value="False"/>
								<Trigger Property="IsDragging" Value="True"/>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		<!-- ScrollBar Simple: usa SimpleThumb, SimpleRepeatButton y SimpleScrollRepeatButton -->
			<Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
				<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
								<Grid.RowDefinitions>
									<RowDefinition MaxHeight="18"/>
									<RowDefinition Height="0.00001*"/>
									<RowDefinition MaxHeight="18"/>
								</Grid.RowDefinitions>
						
								<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand">
									<Grid>
										<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
									</Grid>
								</RepeatButton>
						
						<!-- El control Track es un contenedor de diseño especial que cambia el tamaño del control Thumb y de RepeatButton, que saltan al desplazar cualquiera de sus lados -->
								<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
									<Track.Thumb>
										<Thumb Style="{DynamicResource SimpleThumbStyle}"/>
									</Track.Thumb>
									<Track.IncreaseRepeatButton>
										<RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
									</Track.IncreaseRepeatButton>
									<Track.DecreaseRepeatButton>
										<RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
									</Track.DecreaseRepeatButton>
								</Track>
						
								<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand">
									<Grid>
										<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
									</Grid>
								</RepeatButton>
							</Grid>
					
					<!-- Usa una única plantilla para el control ScrollBar y lo gira para colocarlo en posición horizontal
					También cambia los comandos para que sean de izquierda y derecha en lugar de hacia arriba y hacia abajo -->
							<ControlTemplate.Triggers>
								<Trigger Property="Orientation" Value="Horizontal">

							<!-- Girar el control ScrollBar de vertical a horizontal -->
									<Setter Property="LayoutTransform" TargetName="GridRoot">
										<Setter.Value>
											<RotateTransform Angle="-90"/>
										</Setter.Value>
									</Setter>
							
							<!-- Track está enlazado a Orientation de manera interna, así que es necesario girarlo para volver a colocarlo en posición vertical -->
									<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
					
							<!-- Cambiar los comandos para convertirlos en comandos Horizontal -->
									<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
									<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
									<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
									<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		<!-- ScrollViewer simple
	ScrollViewer es un control Grid que tiene un control ContentPresenter y un control ScrollBar horizontal y vertical 
	Lo usan ListBox, MenuItem, ComboBox y TreeView -->
			<Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollViewer}">
							<Grid Background="{TemplateBinding Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="*"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
						
						<!-- La visibilidad de los controles ScrollBar se controla mediante la implementación del control -->
								<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
								<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		<!-- TextBox simple -->
			<Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
				<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="AllowDrop" Value="true"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TextBox}">
							<Grid>
								<Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" Padding="2" CornerRadius="2">
							
							<!-- La implementación coloca el contenido en el ScrollViewer. Debe denominarse PART_ContentHost para que el control funcione -->
									<ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource SimpleScrollViewer}" Background="{TemplateBinding Background}"/>
						
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
		</ResourceDictionary>
	
	</UserControl.Resources>

	<Grid x:Name="LayoutRoot">
		<Label x:Name="lblHeader" Content="Prestar Herramienta" HorizontalAlignment="Left" Margin="23,23,0,0" Style="{DynamicResource SimpleLabel}" VerticalAlignment="Top" Foreground="#FF626465" FontSize="17.333" Height="23.0533333333333"/>
		<Canvas x:Name="Canvas1" Margin="23,46.053,0,0" HorizontalAlignment="Left" Width="1092.501">
			<Label x:Name="lblVoluntrio" Content="Nombre:" Style="{DynamicResource SimpleLabel}" FontSize="14.667"/>
			<Label x:Name="lblFech" Content="Fecha de préstamo:" Style="{DynamicResource SimpleLabel}" FontSize="14.667" RenderTransformOrigin="0.493,0.461" Canvas.Left="304.5"/>
			<Label x:Name="lblHerramienta" Content="Herramienta:" Style="{DynamicResource SimpleLabel}" FontSize="14.667" Canvas.Top="81.507"/>
			<Label x:Name="lblCantidad" Content="Cantidad:" Style="{DynamicResource SimpleLabel}" FontSize="14.667" Canvas.Top="81.507" Canvas.Left="304.5"/>
			<ComboBox x:Name="cbxVoluntario" Style="{DynamicResource SimpleComboBox}" Width="270" FontSize="14.667" Canvas.Top="19.507" IsEditable="True" IsTextSearchEnabled="True" ToolTip="Nombre de voluntario" Height="26.5" Foreground="#FF333333" KeyDown="cbxVoluntario_KeyDown" />
			<DatePicker x:Name="dpFecha" Width="270" FontSize="14.667" Canvas.Left="304.5" Canvas.Top="19.507" ToolTip="Seleccionar una fecha" Height="26.5" Foreground="#FF333333"/>
			<ComboBox x:Name="cbxHerramienta" Style="{DynamicResource SimpleComboBox}" Width="270" FontSize="14.667" Canvas.Top="101.014" IsEditable="True" IsTextSearchEnabled="True" ToolTip="Nombre de Herramienta" Height="26.5" Foreground="#FF333333" KeyDown="cbxHerramienta_KeyDown" SelectionChanged="cbxHerramienta_SelectionChanged" />
			<TextBox x:Name="txbxCantidad" Style="{DynamicResource SimpleTextBox}" TextWrapping="Wrap" FontSize="14.667" Width="270" Canvas.Left="304.5" Canvas.Top="101.014" Height="26.5" Foreground="#FF333333" KeyDown="txbxCantidad_KeyDown" />
			<Button x:Name="btnAdd" Content="+" Canvas.Left="597.5" Style="{DynamicResource SimpleButton}" Canvas.Top="97.014" Width="41.959" Height="36" BorderBrush="{x:Null}" FontSize="14.667" Background="#FF0092DD" Foreground="White" ToolTip="Agregar a detalle" Click="btnAdd_Click" />
			<DataGrid x:Name="DataGridPrestamo" AlternatingRowBackground="#FFE7E6E6" AutoGenerateColumns="False" Height="147.193" Width="574.5" Canvas.Top="180.467" BorderBrush="{x:Null}" HorizontalGridLinesBrush="#FFCCC9C9" VerticalGridLinesBrush="#FFCCC9C9" RenderTransformOrigin="0,0" FontSize="14.667" Background="White" Foreground="#FF333333">
				<DataGrid.Columns>
					<DataGridTextColumn Header="Herramienta" Binding="{Binding Nombre}" Width="372.3"/>
					<DataGridTextColumn Header="Cantidad" Binding="{Binding Existencia}" Width="177.3"/>
				</DataGrid.Columns>
			</DataGrid>
			<TextBox x:Name="txtObservaciones" Style="{DynamicResource SimpleTextBox}" TextWrapping="Wrap" Canvas.Top="364.506" FontSize="14.667" Height="66.494" Width="574.5" Foreground="#FF333333"/>
			<Button x:Name="btnGuardar" Content="Guardar" Canvas.Left="597.5" Style="{DynamicResource SimpleButton}" Canvas.Top="377.754" Width="133" Height="36" FontSize="14.667" Background="#FF0092DD" BorderBrush="{x:Null}" Foreground="White" Click="btnGuardar_Click" ToolTip="Guardar préstamo" />
			<Button x:Name="btnCancelar" Content="Cancelar" Canvas.Left="751.801" Style="{DynamicResource SimpleButton}" Canvas.Top="377.754" Width="133" Height="36" BorderBrush="{x:Null}" Background="#FFC52023" Foreground="White" FontSize="14.667" ToolTip="Cancelar" Click="btnCancelar_Click" />
			<Label x:Name="lblDetallePrestamo" Content="Detalle del préstamo:" Style="{DynamicResource SimpleLabel}" Canvas.Top="160.959" FontSize="14.667"/>
			<Label Content="Observaciones:" Style="{DynamicResource SimpleLabel}" Canvas.Top="344.998" FontSize="14.667"/>

			<Separator Height="0.5" Margin="0" Style="{DynamicResource SimpleSeparator}" Canvas.Top="68.507" Width="626.059" Background="#FFA0A0A0" Opacity="0.85"/>
			<Button x:Name="btnQuit" Content="-" Canvas.Left="597.5" Style="{DynamicResource SimpleButton}" Canvas.Top="177.22" Width="41.959" Height="36" BorderBrush="{x:Null}" Background="#FFC52023" Foreground="White" FontSize="14.667" Click="btnQuit_Click" ToolTip="Quitar de detalle" />
			<Label x:Name="lblExistencia" Content="" Style="{DynamicResource SimpleLabel}" Canvas.Top="131.514" FontSize="13.333" Canvas.Left="5"/>
		</Canvas>
	</Grid>
</UserControl>