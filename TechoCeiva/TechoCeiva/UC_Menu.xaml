<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	x:Class="TechoCeiva.UC_Menu"
	x:Name="UserControl"
	d:DesignWidth="640" d:DesignHeight="480" Width="1284" Height="661">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Simple Styles.xaml"/>
			</ResourceDictionary.MergedDictionaries>
		</ResourceDictionary>
	</UserControl.Resources>

	<Grid x:Name="LayoutRoot">
		<Grid.RowDefinitions>
			<RowDefinition/>
		</Grid.RowDefinitions>
		<Canvas x:Name="canvasMenu" Margin="160.499,83.947,0,0"/>
		<Canvas x:Name="CanvasExpander" HorizontalAlignment="Left" Width="160.499" Margin="0,83.947,0,0">
			<Rectangle Fill="#FF77777A" Height="0.5" RenderTransformOrigin="0.5,0.5" Width="565.333" Canvas.Left="-122.182" Canvas.Top="285.956">
				<Rectangle.RenderTransform>
					<TransformGroup>
						<ScaleTransform/>
						<SkewTransform/>
						<RotateTransform Angle="90.01"/>
						<TranslateTransform/>
					</TransformGroup>
				</Rectangle.RenderTransform>
			</Rectangle>
			
			<!-- INICIO DEL EXPANDER PARA MENÚ -->
			<Expander x:Name="ExpanderMenu" Header="" Width="160.499" IsExpanded="True">
				<StackPanel>
					<Expander x:Name="expndrEncuestas" Header="Encuestas" Background="#FF0092DD" Cursor="Hand" Foreground="White" FontSize="14.667" Margin="0,0,-2,0" Expanded="expndrEncuestas_Expanded">
						<StackPanel>
							<Button x:Name="btnEncuestaIngresar" Content="Ingresar" Style="{DynamicResource btn_Encuesta_Inresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnEncuestaIngresar_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Encuesta_Inresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
															<Setter Property="OpacityMask" TargetName="contentPresenter" Value="{x:Null}"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnEncuestasComunidad" Content="Comunidad" Style="{DynamicResource btn_Usuarios_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnEncuestasComunidad_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Usuarios_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
							<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
			
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
														<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnEncuentaReportes" Content="Reportes" Style="{DynamicResource btn_Encuesta_Reportes}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Encuesta_Reportes" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.845"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
						</StackPanel>
					</Expander>
					<Expander x:Name="expndrInsumos" Header="Insumos" Foreground="White" Background="#FF0092DD" Cursor="Hand" FontSize="14.667" Margin="0,0,-2,0" Expanded="expndrInsumos_Expanded">
						<StackPanel>
							<Button x:Name="btnInsumosIngresar" Content="Ingresar" Style="{DynamicResource btn_Insumos_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Insumos_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnInsumosReportes" Content="Reportes" Style="{DynamicResource btn_Insumos_Reportes}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Insumos_Reportes" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
						</StackPanel>
			
					</Expander>
					<Expander x:Name="expndrHerramientas" Header="Herramientas" Background="#FF0092DD" Foreground="White" Cursor="Hand" FontSize="14.667" Margin="0,0,-2,0" Expanded="expndrHerramientas_Expanded">
						<StackPanel>
							<Button x:Name="btnToolsIngresar" Content="Ingresar" Style="{DynamicResource btn_Tools_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnToolsIngresar_Click_1">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Tools_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnToolsPrestamos" Content="Préstamos" Style="{DynamicResource btn_Tools_Prestamos}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnToolsPrestamos_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Tools_Prestamos" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnToolsReportes" Content="Reportes" Style="{DynamicResource btn_Tools_Reportes}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Tools_Reportes" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
						
											<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
											<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
						</StackPanel>
					</Expander>
					<Expander x:Name="expndrVoluntarios" Header="Voluntarios" VerticalAlignment="Top" Foreground="White" Background="#FF0092DD" FontSize="14.667" Cursor="Hand" Margin="0,0,-2,0" Expanded="expndrVoluntarios_Expanded">
						<StackPanel>
							<Button x:Name="btnVoluntariosIngresar" Content="Ingresar" Style="{DynamicResource btn_Voluntarios_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnVoluntariosIngresar_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Voluntarios_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnVoluntariosReportes" Content="Reportes" Style="{DynamicResource btn_Voluntarios_Reportes}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Voluntarios_Reportes" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
						</StackPanel>
					</Expander>
					<Expander x:Name="expndrUsuarios" Header="Usuarios" Foreground="White" Background="#FF0092DD" VerticalAlignment="Bottom" FontSize="14.667" Cursor="Hand" Margin="0,0,-2,0" Expanded="expndrUsuarios_Expanded">
						<StackPanel>
							<Button x:Name="btnUsuariosIngresar" Content="Ingresar" Style="{DynamicResource btn_Usuarios_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnUsuariosIngresar_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Usuarios_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
														<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
			
			<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnUsuariosReportes" Content="Reportes" Style="{DynamicResource btn_Usuarios_Reportes}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnUsuariosReportes_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Usuarios_Reportes" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
						</StackPanel>
					</Expander>
					
				</StackPanel>
			</Expander>
			<!-- FIN DEL EXPANDER PARA MENÚ -->
			
		</Canvas>
		<Canvas x:Name="CanvasHeader" Height="83.947" VerticalAlignment="Top">
			<Rectangle Fill="#FF77777A" Height="0.5" Canvas.Left="20" Canvas.Top="75.79" Width="1245"/>
			<Image Source="img/o.png" Stretch="Fill" Width="57" Height="58.947" Canvas.Left="21.5" Canvas.Top="8"/>
			<Label Content="- CEHIVA" Style="{DynamicResource SimpleLabel}" Width="308.993" Foreground="#FF0092DD" FontSize="48" Canvas.Left="96" Canvas.Top="8"/>
		</Canvas>
    </Grid>
</UserControl>