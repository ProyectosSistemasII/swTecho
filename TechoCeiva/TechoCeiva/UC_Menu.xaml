<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	x:Class="TechoCeiva.UC_Menu"
	x:Name="UserControl"
	d:DesignWidth="640" d:DesignHeight="480" Width="1284" Height="661" Loaded="UserControl_Loaded">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Simple Styles.xaml"/>
			</ResourceDictionary.MergedDictionaries>
			<Style x:Key="menuAlignment" TargetType="{x:Type MenuItem}">
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type MenuItem}">
							<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
								<Grid>
							
							<!-- El control Grid se usa para reunir las columnas de un Icon, Content, Glyph checkmark y Arrow para mostrar el siguiente nivel
							 El tamaño compartido se usa en el control Grid para que el Icon, Content, Arrow de cada MenuItem se alineen juntos -->
									<Grid.ColumnDefinitions>
										<ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
										<ColumnDefinition Width="14"/>
									</Grid.ColumnDefinitions>
							
							<!-- ContentPresenter para mostrar un icono si es necesario -->
									<ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
							
							<!-- Glyph es una marca de verificación si se requiere en un menú que se puede activar -->
									<Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
										<Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
									</Grid>
							
							<!-- Contenido del texto del menú, etc. -->
									<ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" HorizontalAlignment="Right"/>
							
							<!-- Arrow dibuja la ruta que apunta al siguiente nivel del menú -->
									<Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
										<Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
									</Grid>
							
							<!-- El Popup es el cuerpo del menú que se expande horizontal o verticalmente según el nivel del elemento -->
									<Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3">
										<Grid x:Name="SubMenu">
											<Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
									
									<!-- StackPanel contiene los elementos secundarios del menú. Se establece cuando IsItemsHost=True -->
											<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
										</Grid>
									</Popup>
							
								</Grid>
							</Border>
					
					<!-- Estos desencadenadores vuelven a configurar las cuatro organizaciones de MenuItem para mostrar distintos niveles del menú a través de Role -->
							<ControlTemplate.Triggers>
					
						<!-- Role = TopLevelHeader: éste es el elemento de menú raíz de un menú; el control Popup se expande hacia abajo -->
								<Trigger Property="Role" Value="TopLevelHeader">
									<Setter Property="Margin" Value="0,1,0,1"/>
									<Setter Property="Padding" Value="6,3,6,3"/>
									<Setter Property="Grid.IsSharedSizeScope" Value="true"/>
									<Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
								</Trigger>
						
						<!-- Role = TopLevelItem: éste es un elemento de menú secundario del nivel superior sin elementos secundarios-->
								<Trigger Property="Role" Value="TopLevelItem">
									<Setter Property="Margin" Value="0,1,0,1"/>
									<Setter Property="Padding" Value="6,3,6,3"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
								</Trigger>
						
						<!-- Role = SubMenuHeader: éste es un elemento de menú secundario que no tiene elementos secundarios -->
								<Trigger Property="Role" Value="SubmenuHeader">
									<Setter Property="DockPanel.Dock" Value="Top"/>
									<Setter Property="Padding" Value="0,2,0,2"/>
									<Setter Property="Grid.IsSharedSizeScope" Value="true"/>
								</Trigger>
						
						<!-- Role = SubMenuItem: éste es un elemento de menú secundario que tiene elementos secundarios-->
								<Trigger Property="Role" Value="SubmenuItem">
									<Setter Property="DockPanel.Dock" Value="Top"/>
									<Setter Property="Padding" Value="0,2,0,2"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
								</Trigger>
								<Trigger Property="IsSuspendingPopupAnimation" Value="true">
									<Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
								</Trigger>
						
						<!-- Si no hay ningún icono, se contrae Icon Content -->
								<Trigger Property="Icon" Value="{x:Null}">
									<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
								</Trigger>
						
						<!-- GlyphPanel contiene la marca de verificación -->
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
								</Trigger>
						
								<Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
									<Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
									<Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
									<Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"/>
								</Trigger>
						
						<!-- Usar los colores del sistema para el resaltado del menú e IsEnabled-->
								<Trigger Property="IsHighlighted" Value="true">
									<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" TargetName="Border"/>
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</UserControl.Resources>

	<Grid x:Name="LayoutRoot">
		<Grid.RowDefinitions>
			<RowDefinition/>
		</Grid.RowDefinitions>
		<Canvas x:Name="canvasMenu" Margin="160.499,75.147,0,0"/>
		<Canvas x:Name="CanvasExpander" HorizontalAlignment="Left" Width="160.499" Margin="0,83.947,0,0">
			<Rectangle Fill="#FF77777A" Height="0.5" RenderTransformOrigin="0.5,0.5" Width="565.333" Canvas.Left="-122.182" Canvas.Top="285.956">
				<Rectangle.RenderTransform>
					<TransformGroup>
						<ScaleTransform/>
						<SkewTransform/>
						<RotateTransform Angle="90.01"/>
						<TranslateTransform/>
					</TransformGroup>
				</Rectangle.RenderTransform>
			</Rectangle>
			
			<!-- INICIO DEL EXPANDER PARA MENÚ -->
			<Expander x:Name="ExpanderMenu" Header="" Width="162" IsExpanded="True" Canvas.Left="-2">
				<StackPanel>
					<Expander x:Name="expndrEncuestas" Header="Encuestas" Background="#FF0092DD" Cursor="Hand" Foreground="White" FontSize="14.667" Margin="0,0,-2,0" Expanded="expndrEncuestas_Expanded">
						<StackPanel>
							<Button x:Name="btnEncuestaIngresar" Content="Ingresar" Style="{DynamicResource btn_Encuesta_Inresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnEncuestaIngresar_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Encuesta_Inresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
															<Setter Property="OpacityMask" TargetName="contentPresenter" Value="{x:Null}"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnEncuestasComunidad" Content="Comunidad" Style="{DynamicResource btn_Usuarios_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnEncuestasComunidad_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Usuarios_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
							<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
			
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
														<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnEncuentaReportes" Content="Reportes" Style="{DynamicResource btn_Encuesta_Reportes}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnEncuentaReportes_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Encuesta_Reportes" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.845"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
						</StackPanel>
					</Expander>
					<Expander x:Name="expndrInsumos" Header="Insumos" Foreground="White" Background="#FF0092DD" Cursor="Hand" FontSize="14.667" Margin="0,0,-2,0" Expanded="expndrInsumos_Expanded">
						<StackPanel>
							<Button x:Name="btnInsumosIngresar" Content="Ingresar" Style="{DynamicResource btn_Insumos_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnInsumosIngresar_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Insumos_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnInsumosReportes" Content="Salida" Style="{DynamicResource btn_Insumos_Reportes}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnInsumosReportes_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Insumos_Reportes" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnReportesInsumos" Content="Reportes" Style="{DynamicResource btn_Voluntarios_Reportes}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnReportesInsumos_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Voluntarios_Reportes" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
						</StackPanel>
			
					</Expander>
					<Expander x:Name="expndrHerramientas" Header="Herramientas" Background="#FF0092DD" Foreground="White" Cursor="Hand" FontSize="14.667" Margin="0,0,-2,0" Expanded="expndrHerramientas_Expanded">
						<StackPanel>
							<Button x:Name="btnToolsIngresar" Content="Ingresar" Style="{DynamicResource btn_Tools_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnToolsIngresar_Click_1">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Tools_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnToolsPrestamos" Content="Préstamos" Style="{DynamicResource btn_Tools_Prestamos}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnToolsPrestamos_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Tools_Prestamos" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
							<Button x:Name="btnToolsReportes" Content="Reportes" Style="{DynamicResource btn_Tools_Reportes}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnToolsReportes_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Tools_Reportes" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
						
											<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
											<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
						</StackPanel>
					</Expander>
					<Expander x:Name="expndrVoluntarios" Header="Voluntarios" VerticalAlignment="Top" Foreground="White" Background="#FF0092DD" FontSize="14.667" Cursor="Hand" Margin="0,0,-2,0" Expanded="expndrVoluntarios_Expanded">
						<StackPanel>
							<Button x:Name="btnVoluntariosIngresar" Content="Ingresar" Style="{DynamicResource btn_Voluntarios_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnVoluntariosIngresar_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Voluntarios_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
												<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
												<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
						</StackPanel>
					</Expander>
					<Expander x:Name="expndrUsuarios" Header="Usuarios" Foreground="White" Background="#FF0092DD" VerticalAlignment="Bottom" FontSize="14.667" Cursor="Hand" Margin="0,0,-2,0" Expanded="expndrUsuarios_Expanded">
						<StackPanel>
							<Button x:Name="btnUsuariosIngresar" Content="Ingresar" Style="{DynamicResource btn_Usuarios_Ingresar}" BorderBrush="{x:Null}" Background="#FF0092DD" Foreground="White" Height="26" Click="btnUsuariosIngresar_Click">
								<Button.Resources>
<!-- Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos -->
									<Style x:Key="btn_Usuarios_Ingresar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
										<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
										<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
										<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
													<Grid x:Name="Grid">
														<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
														<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
			
			<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
														<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
													</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
													<ControlTemplate.Triggers>
														<Trigger Property="IsKeyboardFocused" Value="true">
															<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="true">
															<Setter Property="Background" TargetName="Border" Value="#FF747B7E"/>
															<Setter Property="Opacity" TargetName="Border" Value="0.85"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="true">
															<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="true"/>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
															<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
															<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
	
								</Button.Resources>
							</Button>
                        </StackPanel>
					</Expander>
					
				</StackPanel>
			</Expander>
			<!-- FIN DEL EXPANDER PARA MENÚ -->
			
		</Canvas>
		<Canvas x:Name="CanvasHeader" Height="75.147" VerticalAlignment="Top" HorizontalAlignment="Left" Width="751.2">
			<Rectangle Fill="#FF77777A" Height="0.5" Canvas.Left="20" Canvas.Top="75.79" Width="1245"/>
			<Image Source="img/o.png" Stretch="Fill" Width="57" Height="58.947" Canvas.Left="21.5" Canvas.Top="8"/>
			<Label Content="- CEIVA" Style="{DynamicResource SimpleLabel}" Width="308.993" Foreground="#FF0092DD" FontSize="48" Canvas.Left="96" Canvas.Top="8"/>
		</Canvas>
		<Canvas x:Name="canvasUser" HorizontalAlignment="Left" Margin="1051.2,0,0,0" Width="232.8" Height="75.147" VerticalAlignment="Top">
			<Image Height="19.507" Canvas.Left="2" Source="img/User_Azul_2.png" Stretch="Fill" Canvas.Top="15.2" Width="14.4" ToolTip="Usuario Logueado"/>
			<Label x:Name="lblUser" Content="Label" Canvas.Left="20.4" Style="{DynamicResource SimpleLabel}" Canvas.Top="15.2" FontSize="14.667" FontFamily="Segoe UI Light"/>
			<Menu Height="24.507" Style="{DynamicResource SimpleMenu}" Canvas.Top="38.707" Width="20.4" BorderBrush="{x:Null}" Background="{x:Null}" Canvas.Left="-1">
				<MenuItem x:Name="menuConf" Header="" Margin="0" Style="{DynamicResource DiseñoMenuConf}" Width="20.4" ToolTip="Ayuda" FontSize="14.667" FontFamily="Segoe UI Light" Height="20.44" VerticalAlignment="Top">
					<MenuItem.Resources>
<!-- MenuItem simple: la plantilla usa desencadenadores para proporcionar cuatro disposiciones distintas de los elementos de menú que se establecen a través de la propiedad Role --> 
						<Style x:Key="DiseñoMenuConf" TargetType="{x:Type MenuItem}">
							<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
							<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
							<Setter Property="Background" Value="Transparent"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type MenuItem}">
										<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
											<Grid>
							
							<!-- El control Grid se usa para reunir las columnas de un Icon, Content, Glyph checkmark y Arrow para mostrar el siguiente nivel
							 El tamaño compartido se usa en el control Grid para que el Icon, Content, Arrow de cada MenuItem se alineen juntos -->
												<Grid.ColumnDefinitions>
													<ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
													<ColumnDefinition Width="*"/>
													<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
													<ColumnDefinition Width="14"/>
												</Grid.ColumnDefinitions>
							
							<!-- ContentPresenter para mostrar un icono si es necesario -->
												<ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
							
							<!-- Glyph es una marca de verificación si se requiere en un menú que se puede activar -->
												<Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
													<Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
												</Grid>
							
							<!-- Contenido del texto del menú, etc. -->
												<ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header"/>
							
							<!-- Arrow dibuja la ruta que apunta al siguiente nivel del menú -->
												<Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
													<Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
												</Grid>
							
							<!-- El Popup es el cuerpo del menú que se expande horizontal o verticalmente según el nivel del elemento -->
												<Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3">
													<Grid x:Name="SubMenu">
														<Border x:Name="SubMenuBorder" Background="White" BorderBrush="{x:Null}" BorderThickness="1"/>
									
									<!-- StackPanel contiene los elementos secundarios del menú. Se establece cuando IsItemsHost=True -->
														<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
													</Grid>
												</Popup>
							
											</Grid>
										</Border>
					
					<!-- Estos desencadenadores vuelven a configurar las cuatro organizaciones de MenuItem para mostrar distintos niveles del menú a través de Role -->
										<ControlTemplate.Triggers>
					
						<!-- Role = TopLevelHeader: éste es el elemento de menú raíz de un menú; el control Popup se expande hacia abajo -->
											<Trigger Property="Role" Value="TopLevelHeader">
												<Setter Property="Margin" Value="0,1,0,1"/>
												<Setter Property="Padding" Value="6,3,6,3"/>
												<Setter Property="Grid.IsSharedSizeScope" Value="true"/>
												<Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
												<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
											</Trigger>
						
						<!-- Role = TopLevelItem: éste es un elemento de menú secundario del nivel superior sin elementos secundarios-->
											<Trigger Property="Role" Value="TopLevelItem">
												<Setter Property="Margin" Value="0,1,0,1"/>
												<Setter Property="Padding" Value="6,3,6,3"/>
												<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
											</Trigger>
						
						<!-- Role = SubMenuHeader: éste es un elemento de menú secundario que no tiene elementos secundarios -->
											<Trigger Property="Role" Value="SubmenuHeader">
												<Setter Property="DockPanel.Dock" Value="Top"/>
												<Setter Property="Padding" Value="0,2,0,2"/>
												<Setter Property="Grid.IsSharedSizeScope" Value="true"/>
											</Trigger>
						
						<!-- Role = SubMenuItem: éste es un elemento de menú secundario que tiene elementos secundarios-->
											<Trigger Property="Role" Value="SubmenuItem">
												<Setter Property="DockPanel.Dock" Value="Top"/>
												<Setter Property="Padding" Value="0,2,0,2"/>
												<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
											</Trigger>
											<Trigger Property="IsSuspendingPopupAnimation" Value="true">
												<Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
											</Trigger>
						
						<!-- Si no hay ningún icono, se contrae Icon Content -->
											<Trigger Property="Icon" Value="{x:Null}">
												<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
											</Trigger>
						
						<!-- GlyphPanel contiene la marca de verificación -->
											<Trigger Property="IsChecked" Value="true">
												<Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
												<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
											</Trigger>
						
											<Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
												<Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
												<Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
												<Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"/>
											</Trigger>
											<MultiTrigger>
												<MultiTrigger.Conditions>
													<Condition Property="IsMouseDirectlyOver" Value="True"/>
													<Condition Property="ButtonBase.Command" Value="{x:Null}"/>
												</MultiTrigger.Conditions>
												<Setter
											Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" TargetName="Border"/>
												<Setter
											Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
											</MultiTrigger>
						
						<!-- Usar los colores del sistema para el resaltado del menú e IsEnabled-->
											<Trigger Property="IsEnabled" Value="false">
												<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
	
					</MenuItem.Resources>
					<MenuItem.Background>
						<ImageBrush ImageSource="img/Tool_Azul_2.png" Stretch="Uniform"/>
					</MenuItem.Background>
					<MenuItem x:Name="menuProyecto" Header="Proyecto" Style="{DynamicResource menuAlignment}" Click="menuProyecto_Click" />
					<MenuItem x:Name="menuAcercaDe" Header="Acerca de Ceiva" Style="{DynamicResource menuAlignment}" Click="menuAcercaDe_Click" />
				</MenuItem>
			</Menu>
			<Label Content="CopyRight" Canvas.Left="20.4" Style="{DynamicResource SimpleLabel}" Canvas.Top="38.707" FontFamily="Segoe UI Light" FontSize="14.667"/>
		</Canvas>
    </Grid>
</UserControl>