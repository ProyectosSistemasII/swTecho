<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
	mc:Ignorable="d"
	x:Class="TechoCeiva.UC_NewTool"
	x:Name="UserControl"
	d:DesignWidth="640" d:DesignHeight="480" Width="1123.501" Height="577.053">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Simple Styles.xaml"/>
			</ResourceDictionary.MergedDictionaries>
			<Style x:Key="btnMarco2" TargetType="{x:Type Button}" BasedOn="{x:Null}">
				<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
							<Grid x:Name="Grid">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
								<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
						<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
								<Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="1" HorizontalAlignment="Stretch" Height="Auto" Margin="0" VerticalAlignment="Stretch" Width="Auto"/>
							</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="#FF0092DD"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="true"/>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="btnDiseñoPlus" TargetType="{x:Type Button}" BasedOn="{x:Null}">
				<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
							<Grid x:Name="Grid">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
								<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
						<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
								<Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="1" HorizontalAlignment="Stretch" Height="Auto" Margin="0" VerticalAlignment="Stretch" Width="Auto"/>
							</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="#FF0092DD"/>
									<Setter Property="Background" TargetName="border">
										<Setter.Value>
											<ImageBrush ImageSource="add.png" Stretch="Uniform"/>
										</Setter.Value>
									</Setter>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="true"/>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="btnDiseñoEditar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
				<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
							<Grid x:Name="Grid">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
								<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
						<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
								<Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="1" HorizontalAlignment="Stretch" Height="Auto" Margin="0" VerticalAlignment="Stretch" Width="Auto"/>
							</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="#FF0092DD"/>
									<Setter Property="Background" TargetName="border">
										<Setter.Value>
											<ImageBrush ImageSource="img/pencil.png" Stretch="Uniform"/>
										</Setter.Value>
									</Setter>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="true"/>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="btnDiseñoEliminar" TargetType="{x:Type Button}" BasedOn="{x:Null}">
				<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
							<Grid x:Name="Grid">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
								<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
						<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
								<Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="1" HorizontalAlignment="Stretch" Height="Auto" Margin="0" VerticalAlignment="Stretch" Width="Auto"/>
							</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="#FF0092DD"/>
									<Setter Property="Background" TargetName="border">
										<Setter.Value>
											<ImageBrush ImageSource="img/delete.png" Stretch="Uniform"/>
										</Setter.Value>
									</Setter>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="true"/>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</UserControl.Resources>

	<Grid x:Name="LayoutRoot">
		<Label Content="Herramientas" HorizontalAlignment="Left" Margin="23,8,0,0" Style="{DynamicResource SimpleLabel}" VerticalAlignment="Top" Foreground="#FF020202" FontSize="26.667"/>
        
		<DataGrid Margin="23,56.27,0,41.23" AlternatingRowBackground="#FFE7E6E6" HorizontalAlignment="Left" Width="791.4" Name="DataGridHerramientas" FontSize="14.667" AutoGenerateColumns="False" IsReadOnly="True" VerticalGridLinesBrush="#FFCCC9C9" HorizontalGridLinesBrush="#FFCCC9C9" BorderBrush="{x:Null}" MouseDoubleClick="DataGridHerramientas_MouseDoubleClick" Background="White">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Nombre" Binding="{Binding Nombre}" Width="240" FontSize="14"/>           
                <DataGridTextColumn Header="Existencia" Binding="{Binding Existencia}" Width="130.3" FontSize="14"/>
				<DataGridTextColumn Header="Perdidas" Binding="{Binding malEstado}" Width="130.3" FontSize="14"/>
				<DataGridTextColumn Header="Dañadas" Binding="{Binding perdidas}" Width="130.3" FontSize="14"/>
				<DataGridTextColumn Header="Total" Binding="{Binding Total}" Width="130.3" FontSize="14"/>
            </DataGrid.Columns>
        </DataGrid>
		<Button x:Name="btnPlus" Content="" Margin="291.6,18.168,0,0" Style="{DynamicResource btnDiseñoPlus}" VerticalAlignment="Top" Height="20" BorderBrush="{x:Null}" HorizontalAlignment="Left" Width="30" FontSize="14.667" Click="btnPlus_Click" ToolTip="Nueva Herrameinta" Foreground="{x:Null}" >
			<Button.Background>
				<ImageBrush ImageSource="add.png" Stretch="Uniform"/>
			</Button.Background>
		</Button>
		<Button x:Name="btnEliminar" Content="X" HorizontalAlignment="Left" Margin="359.6,18.168,0,0" Style="{DynamicResource btnDiseñoEliminar}" VerticalAlignment="Top" Width="30" BorderBrush="{x:Null}" Foreground="{x:Null}" Height="20" FontSize="14.667" ToolTip="Eliminar Herramienta" Click="btnEliminar_Click" >
			<Button.Background>
				<ImageBrush ImageSource="img/delete.png" Stretch="Uniform"/>
			</Button.Background>
		</Button>
		<Button x:Name="btnEditar" Content="..." HorizontalAlignment="Left" Margin="325.6,18.168,0,0" Style="{DynamicResource btnDiseñoEditar}" VerticalAlignment="Top" Width="30" Height="20" BorderBrush="{x:Null}" Foreground="{x:Null}" FontSize="14.667" Click="btnEditar_Click" ToolTip="Editar Herramienta" >
			<Button.Background>
				<ImageBrush ImageSource="img/pencil.png" Stretch="Uniform"/>
			</Button.Background>
		</Button>
	</Grid>
</UserControl>