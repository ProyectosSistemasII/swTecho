<UserControl x:Class="TechoCeiva.UC_Comunidad"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" Loaded="UserControl_Loaded" Height="576" Width="595">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Simple Styles.xaml"/>
			</ResourceDictionary.MergedDictionaries>
			<Style x:Key="btnMarcoDiseño" TargetType="{x:Type Button}" BasedOn="{x:Null}">
				<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
							<Grid x:Name="Grid">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
								<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
						<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
								<Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="1" HorizontalAlignment="Stretch" Margin="0" Width="Auto"/>
							</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="Background" TargetName="border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="#FF0092DD"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="true"/>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="btnDiseñoPlus" TargetType="{x:Type Button}" BasedOn="{x:Null}">
				<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
							<Grid x:Name="Grid">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
								<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
						<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
								<Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="1" HorizontalAlignment="Stretch" Height="Auto" Margin="0" VerticalAlignment="Stretch" Width="Auto"/>
							</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="#FF0092DD"/>
									<Setter Property="Background" TargetName="border">
										<Setter.Value>
											<ImageBrush ImageSource="add.png" Stretch="Uniform"/>
										</Setter.Value>
									</Setter>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="true"/>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="btnDiseñoTrash" TargetType="{x:Type Button}" BasedOn="{x:Null}">
				<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón -->
							<Grid x:Name="Grid">
						
								<!-- Content Presenter es donde el control coloca el contenido de texto, etc. -->
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
								<!-- Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla -->
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
								<Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="1" HorizontalAlignment="Stretch" Height="Auto" Margin="0" VerticalAlignment="Stretch" Width="Auto"/>
							</Grid>
					
					<!--Cada estado establece un pincel en el elemento Border de la plantilla -->
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="#FF0092DD"/>
									<Setter Property="Background" TargetName="border">
										<Setter.Value>
											<ImageBrush ImageSource="waste.png" Stretch="Uniform"/>
										</Setter.Value>
									</Setter>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="true"/>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
									<Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</UserControl.Resources>
    <Grid Margin="10.5,8,-79.5,0" d:LayoutOverrides="VerticalMargin">
        <Label Content="Comunidades" FontSize="26.667" Foreground="#FF626465" Margin="23,23,432,505" Name="lblTitle" Style="{DynamicResource SimpleLabel}" Height="40" />
        <Button BorderBrush="{x:Null}" Content="" FontSize="14.667" Foreground="White" Height="20" Margin="320,31,312,505" Name="btnGuardar" Style="{DynamicResource btnDiseñoPlus}" Click="btnGuardar_Click" Width="30" >
        	<Button.Background>
        		<ImageBrush Stretch="Uniform" ImageSource="add.png"/>
        	</Button.Background>
        </Button>
        <Button BorderBrush="{x:Null}" Content="" FontSize="14.667" Foreground="White" Height="20" Margin="358,31,274,505" Name="btnCancelar" Style="{DynamicResource btnDiseñoTrash}" Click="btnCancelar_Click" Width="30" >
        	<Button.Background>
        		<ImageBrush ImageSource="waste.png" Stretch="Uniform"/>
        	</Button.Background>
        </Button>
        <DataGrid x:Name="dataGridComn" Margin="23,95,0,218" AlternatingRowBackground="#FFE7E6E6" HorizontalAlignment="Left" VerticalGridLinesBrush="#FFCCC9C9" HorizontalGridLinesBrush="#FFCCC9C9" BorderBrush="{x:Null}" Background="White" AutoGenerateColumns="false" IsReadOnly="True" FontSize="14.667" MouseDoubleClick="dataGridComn_MouseDoubleClick" Width="500" d:LayoutOverrides="VerticalAlignment">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Nombre de Comunidad" Binding="{Binding Nombre}"/>
                <DataGridTextColumn Header="Municipio" Binding="{Binding MunicipioNombre}"/>
                <DataGridTextColumn Header="Departamento" Binding="{Binding DepartamentoNombre}"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>
