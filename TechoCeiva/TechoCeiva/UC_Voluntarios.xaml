<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	x:Class="TechoCeiva.UC_Voluntarios"
	x:Name="UserControl"
	d:DesignWidth="640" d:DesignHeight="480" Width="1123.501" Height="577.053">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Simple Styles.xaml"/>
			</ResourceDictionary.MergedDictionaries>
			<!-- Etiqueta simple: esta plantilla es simplemente un ContentPresenter que muestra el contenido de la etiqueta -->
			<Style x:Key="SimpleLabel" TargetType="{x:Type Label}">
				<Setter Property="HorizontalContentAlignment" Value="Left"/>
				<Setter Property="VerticalContentAlignment" Value="Top"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Label}">
							<Grid>
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false"/>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
			<SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
			<SolidColorBrush x:Key="SolidBorderBrush" Color="#888"/>
			<SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF"/>
			<LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#EEE" Offset="0.0"/>
				<GradientStop Color="#CCC" Offset="1.0"/>
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#CCC" Offset="0.0"/>
				<GradientStop Color="#444" Offset="1.0"/>
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#777" Offset="0.0"/>
				<GradientStop Color="#000" Offset="1.0"/>
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#FFF" Offset="0.0"/>
				<GradientStop Color="#AAA" Offset="1.0"/>
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#BBB" Offset="0.0"/>
				<GradientStop Color="#EEE" Offset="0.1"/>
				<GradientStop Color="#EEE" Offset="0.9"/>
				<GradientStop Color="#FFF" Offset="1.0"/>
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#444" Offset="0.0"/>
				<GradientStop Color="#888" Offset="1.0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>
			<Style x:Key="SimpleRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RepeatButton}">
							<Grid>
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
								<ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Focusable" Value="false"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RepeatButton}">
							<Grid>
								<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="SimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Thumb}">
							<Grid Margin="0,0,0,0" x:Name="Grid">
								<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsFocused" Value="True"/>
								<Trigger Property="IsMouseOver" Value="True"/>
								<Trigger Property="IsEnabled" Value="False"/>
								<Trigger Property="IsDragging" Value="True"/>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
				<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
								<Grid.RowDefinitions>
									<RowDefinition MaxHeight="18"/>
									<RowDefinition Height="0.00001*"/>
									<RowDefinition MaxHeight="18"/>
								</Grid.RowDefinitions>
						
								<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand">
									<Grid>
										<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
									</Grid>
								</RepeatButton>
						
								<!-- El control Track es un contenedor de diseño especial que cambia el tamaño del control Thumb y de RepeatButton, que saltan al desplazar cualquiera de sus lados -->
								<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
									<Track.Thumb>
										<Thumb Style="{DynamicResource SimpleThumbStyle}"/>
									</Track.Thumb>
									<Track.IncreaseRepeatButton>
										<RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
									</Track.IncreaseRepeatButton>
									<Track.DecreaseRepeatButton>
										<RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
									</Track.DecreaseRepeatButton>
								</Track>
						
								<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand">
									<Grid>
										<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
									</Grid>
								</RepeatButton>
							</Grid>
					
							<!-- Usa una única plantilla para el control ScrollBar y lo gira para colocarlo en posición horizontal
					También cambia los comandos para que sean de izquierda y derecha en lugar de hacia arriba y hacia abajo -->
							<ControlTemplate.Triggers>
								<Trigger Property="Orientation" Value="Horizontal">

									<!-- Girar el control ScrollBar de vertical a horizontal -->
									<Setter Property="LayoutTransform" TargetName="GridRoot">
										<Setter.Value>
											<RotateTransform Angle="-90"/>
										</Setter.Value>
									</Setter>
							
									<!-- Track está enlazado a Orientation de manera interna, así que es necesario girarlo para volver a colocarlo en posición vertical -->
									<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
					
									<!-- Cambiar los comandos para convertirlos en comandos Horizontal -->
									<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
									<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
									<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
									<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollViewer}">
							<Grid Background="{TemplateBinding Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="*"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
						
								<!-- La visibilidad de los controles ScrollBar se controla mediante la implementación del control -->
								<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
								<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
				<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="AllowDrop" Value="true"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TextBox}">
							<Grid>
								<Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" Padding="2" CornerRadius="2">
							
									<!-- La implementación coloca el contenido en el ScrollViewer. Debe denominarse PART_ContentHost para que el control funcione -->
									<ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource SimpleScrollViewer}" Background="{TemplateBinding Background}"/>
						
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<SolidColorBrush x:Key="GlyphBrush" Color="#444"/>
			<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition/>
						<ColumnDefinition Width="20"/>
					</Grid.ColumnDefinitions>
					<Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
					<Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource WindowBackgroundBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
					<Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Fill" Value="{DynamicResource MouseOverBrush}" TargetName="Rectangle"/>
					</Trigger>
					<Trigger Property="IsChecked" Value="true">
						<Setter Property="Fill" Value="{DynamicResource PressedBrush}" TargetName="Rectangle"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle"/>
						<Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>
						<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						<Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
				<!-- Debe denominarse PART_ContentHost -->
				<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
			</ControlTemplate>
			<Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
				<Setter Property="SnapsToDevicePixels" Value="true"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBox}">
							<Grid>
								<!-- ToggleButton está enlazados a datos con el propio ComboBox para activar o desactivar IsDropDownOpen -->
								<ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
								<ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
						
								<!-- El TextBox debe denominarse PART_EditableTextBox ya que, de lo contrario, el ComboBox no lo reconocerá -->
								<TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>
						
								<!-- El control Popup muestra la lista de elementos del ComboBox. IsOpen está enlazado a datos con IsDropDownOpen, que se activa y desactiva mediante el control ComboBoxToggleButton -->
								<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
									<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
										<Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
										<ScrollViewer Margin="4,6,4,6" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
							
											<!-- StackPanel se usa para mostrar los elementos secundarios estableciendo IsItemsHost en True -->
											<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
								
										</ScrollViewer>
									</Grid>
								</Popup>
							</Grid>
							<ControlTemplate.Triggers>						
								<!-- Impone un tamaño mínimo al control DropDown si está vacío -->
								<Trigger Property="HasItems" Value="false">
									<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
								<Trigger Property="IsGrouping" Value="true">
									<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
								</Trigger>
								<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
									<Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
									<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
								</Trigger>
								<Trigger Property="IsEditable" Value="true">
									<Setter Property="IsTabStop" Value="false"/>
									<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
									<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
		</ResourceDictionary>
	
	</UserControl.Resources>

	<Grid x:Name="LayoutRoot">
		<Grid.RowDefinitions>
			<RowDefinition/>
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="1123.501"/>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition Width="0"/>
		</Grid.ColumnDefinitions>
		<Label x:Name="lblVoluntarios" Content="Voluntarios" Style="{DynamicResource SimpleLabel}" Foreground="#FF626465" FontSize="26.667" Margin="38.815,18,0,0" VerticalAlignment="Top" HorizontalAlignment="Left"/>
        <DataGrid x:Name="datagdVoluntarios" Margin="12,89.437,33.501,24.053" AlternatingRowBackground="#FFE7E6E6" HorizontalAlignment="Left" VerticalGridLinesBrush="#FFCCC9C9" HorizontalGridLinesBrush="#FFCCC9C9" BorderBrush="{x:Null}" Background="White" AutoGenerateColumns="False" MouseDoubleClick="datagdVoluntarios_MouseDoubleClick" IsReadOnly="True" FontSize="14.667">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Nombres" Binding="{Binding nombres}"/>
                <DataGridTextColumn Header="Apellidos" Binding="{Binding apellidos}"/>
                <DataGridTextColumn Header="Teléfono" Binding="{Binding telefono}"/>
                <DataGridTextColumn Header="Correo" Binding="{Binding correo}"/>
                <DataGridTextColumn Header="Dirección" Binding="{Binding direccion}"/>
                <DataGridTextColumn Header="Municipio" Binding="{Binding nombreM}"/>
                <DataGridTextColumn Header="Departamento" Binding="{Binding nombreD}"/>
                <DataGridTextColumn Header="Contacto de Emergencia" Binding="{Binding personaEmergencia}"/>
                <DataGridTextColumn Header="Teléfono" Binding="{Binding telefonoEmergencia}"/>
            </DataGrid.Columns>            
        </DataGrid>
		<Button x:Name="btnPlus" Content="+" HorizontalAlignment="Left" Height="32" Margin="190,18,0,0" Style="{DynamicResource SimpleButton}" VerticalAlignment="Top" Width="32" FontSize="14.667" Click="btnPlus_Click" BorderBrush="{x:Null}" Foreground="{x:Null}" >
			<Button.Background>
				<ImageBrush ImageSource="add.png" Stretch="None"/>
			</Button.Background>
		</Button>
		<Button x:Name="btnDelet" Content="" HorizontalAlignment="Left" Height="32" Margin="226,18,0,0" VerticalAlignment="Top" Width="32" FontSize="14.667" Click="btnDelet_Click" BorderBrush="{x:Null}" Foreground="{x:Null}" >
			<Button.Background>
				<ImageBrush ImageSource="waste.png" Stretch="None"/>
			</Button.Background>
		</Button>
    </Grid>
</UserControl>